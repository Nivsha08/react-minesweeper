{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { CELL_SIZE_PX } from \"../constants\";\n\nconst initCell = (row, column, isMine = false) => ({\n  row,\n  column,\n  isMine,\n  numberOfNeighborMines: 0,\n  flagged: false,\n  unknown: false\n});\n\nconst initGrid = (rows, columns, numberOfMines) => {\n  const grid = [];\n\n  for (let i = 0; i < rows; i++) {\n    grid.push([]);\n\n    for (let j = 0; j < columns; j++) {\n      grid[i].push(initCell(i, j));\n    }\n  }\n\n  return grid;\n};\n\nconst getGridStyle = (rows, columns) => ({\n  gridTemplateRows: `${CELL_SIZE_PX}px `.repeat(rows),\n  gridTemplateColumns: `${CELL_SIZE_PX}px `.repeat(columns)\n});\n\nexport const useGameGrid = gameConfig => {\n  _s();\n\n  const {\n    rows,\n    columns,\n    numberOfMines\n  } = gameConfig;\n  const gridStyle = getGridStyle(rows, columns);\n  const [gameGrid, setGameGrid] = useState(initGrid(rows, columns, numberOfMines));\n  return {\n    gameGrid,\n    setGameGrid,\n    gridStyle\n  };\n};\n\n_s(useGameGrid, \"2aKBBwXeDWUO2b+7kIJgN57w8HI=\");","map":{"version":3,"sources":["/Users/nivshani/Desktop/react-minesweeper/src/hooks/use-game-grid.ts"],"names":["useState","CELL_SIZE_PX","initCell","row","column","isMine","numberOfNeighborMines","flagged","unknown","initGrid","rows","columns","numberOfMines","grid","i","push","j","getGridStyle","gridTemplateRows","repeat","gridTemplateColumns","useGameGrid","gameConfig","gridStyle","gameGrid","setGameGrid"],"mappings":";;AACA,SAAuBA,QAAvB,QAAsC,OAAtC;AACA,SAAQC,YAAR,QAA2B,cAA3B;;AAEA,MAAMC,QAAQ,GAAG,CAACC,GAAD,EAAcC,MAAd,EAA8BC,MAAe,GAAG,KAAhD,MAAiE;AAC9EF,EAAAA,GAD8E;AAE9EC,EAAAA,MAF8E;AAG9EC,EAAAA,MAH8E;AAI9EC,EAAAA,qBAAqB,EAAE,CAJuD;AAK9EC,EAAAA,OAAO,EAAE,KALqE;AAM9EC,EAAAA,OAAO,EAAE;AANqE,CAAjE,CAAjB;;AASA,MAAMC,QAAQ,GAAG,CAACC,IAAD,EAAeC,OAAf,EAAgCC,aAAhC,KAAoE;AACjF,QAAMC,IAAc,GAAG,EAAvB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EAA+B;AAC3BD,IAAAA,IAAI,CAACE,IAAL,CAAU,EAAV;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,OAApB,EAA6BK,CAAC,EAA9B,EAAkC;AAC9BH,MAAAA,IAAI,CAACC,CAAD,CAAJ,CAAQC,IAAR,CAAab,QAAQ,CAACY,CAAD,EAAIE,CAAJ,CAArB;AACH;AACJ;;AAED,SAAOH,IAAP;AACH,CAXD;;AAaA,MAAMI,YAAY,GAAG,CAACP,IAAD,EAAeC,OAAf,MAAmD;AACpEO,EAAAA,gBAAgB,EAAG,GAAEjB,YAAa,KAAhB,CAAqBkB,MAArB,CAA4BT,IAA5B,CADkD;AAEpEU,EAAAA,mBAAmB,EAAG,GAAEnB,YAAa,KAAhB,CAAqBkB,MAArB,CAA4BR,OAA5B;AAF+C,CAAnD,CAArB;;AAKA,OAAO,MAAMU,WAAW,GAAIC,UAAD,IAAmC;AAAA;;AAC1D,QAAM;AAACZ,IAAAA,IAAD;AAAOC,IAAAA,OAAP;AAAgBC,IAAAA;AAAhB,MAAiCU,UAAvC;AACA,QAAMC,SAAS,GAAGN,YAAY,CAACP,IAAD,EAAOC,OAAP,CAA9B;AAEA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0BzB,QAAQ,CAAWS,QAAQ,CAACC,IAAD,EAAOC,OAAP,EAAgBC,aAAhB,CAAnB,CAAxC;AAEA,SAAO;AACHY,IAAAA,QADG;AAEHC,IAAAA,WAFG;AAGHF,IAAAA;AAHG,GAAP;AAKH,CAXM;;GAAMF,W","sourcesContent":["import {Cell, GameConfiguration} from \"../types/types\";\nimport {CSSProperties, useState} from \"react\";\nimport {CELL_SIZE_PX} from \"../constants\";\n\nconst initCell = (row: number, column: number, isMine: boolean = false): Cell => ({\n    row,\n    column,\n    isMine,\n    numberOfNeighborMines: 0,\n    flagged: false,\n    unknown: false\n});\n\nconst initGrid = (rows: number, columns: number, numberOfMines: number): Cell[][] => {\n    const grid: Cell[][] = [];\n\n    for (let i = 0; i < rows; i++) {\n        grid.push([]);\n        for (let j = 0; j < columns; j++) {\n            grid[i].push(initCell(i, j));\n        }\n    }\n\n    return grid;\n};\n\nconst getGridStyle = (rows: number, columns: number): CSSProperties => ({\n    gridTemplateRows: `${CELL_SIZE_PX}px `.repeat(rows),\n    gridTemplateColumns: `${CELL_SIZE_PX}px `.repeat(columns),\n});\n\nexport const useGameGrid = (gameConfig: GameConfiguration) => {\n    const {rows, columns, numberOfMines} = gameConfig;\n    const gridStyle = getGridStyle(rows, columns);\n\n    const [gameGrid, setGameGrid] = useState<Cell[][]>(initGrid(rows, columns, numberOfMines));\n\n    return {\n        gameGrid,\n        setGameGrid,\n        gridStyle\n    }\n};"]},"metadata":{},"sourceType":"module"}