{"ast":null,"code":"var _jsxFileName = \"/Users/nivshani/Desktop/react-minesweeper/src/components/game-grid/game-grid.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport styles from './game-grid.module.scss';\nimport { GridCell } from \"../grid-cell/grid-cell\";\nimport { useGridState } from \"../../hooks/use-grid-state\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GameGrid = ({\n  configuration\n}) => {\n  _s();\n\n  const {\n    rows,\n    columns\n  } = configuration;\n  const {\n    gameGrid,\n    setGameGrid\n  } = useGridState(configuration);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.gameGrid,\n    style: getGridStyle(rows, columns),\n    children: gameGrid.map((gridRow, i) => gridRow.map((cell, j) => /*#__PURE__*/_jsxDEV(GridCell, {\n      cell: cell\n    }, `(${i},${j})`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 64\n    }, this)))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 12\n  }, this);\n};\n\n_s(GameGrid, \"b2FasoIp7TQcJ9eDNABBVbm42RM=\", false, function () {\n  return [useGridState];\n});\n\n_c = GameGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameGrid\");","map":{"version":3,"sources":["/Users/nivshani/Desktop/react-minesweeper/src/components/game-grid/game-grid.tsx"],"names":["React","styles","GridCell","useGridState","GameGrid","configuration","rows","columns","gameGrid","setGameGrid","getGridStyle","map","gridRow","i","cell","j"],"mappings":";;;AAAA,OAAOA,KAAP,MAAmC,OAAnC;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AAGA,SAAQC,QAAR,QAAuB,wBAAvB;AACA,SAAQC,YAAR,QAA2B,4BAA3B;;AAMA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAoC;AAAA;;AACxD,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAkBF,aAAxB;AACA,QAAM;AAACG,IAAAA,QAAD;AAAWC,IAAAA;AAAX,MAA0BN,YAAY,CAACE,aAAD,CAA5C;AAEA,sBAAO;AAAK,IAAA,SAAS,EAAEJ,MAAM,CAACO,QAAvB;AAAiC,IAAA,KAAK,EAAEE,YAAY,CAACJ,IAAD,EAAOC,OAAP,CAApD;AAAA,cACFC,QAAQ,CAACG,GAAT,CAAa,CAACC,OAAD,EAAUC,CAAV,KAAgBD,OAAO,CAACD,GAAR,CAAY,CAACG,IAAD,EAAOC,CAAP,kBAAa,QAAC,QAAD;AAAU,MAAA,IAAI,EAAED;AAAhB,OAA4B,IAAGD,CAAE,IAAGE,CAAE,GAAtC;AAAA;AAAA;AAAA;AAAA,YAAzB,CAA7B;AADE;AAAA;AAAA;AAAA;AAAA,UAAP;AAKH,CATM;;GAAMX,Q;UAEuBD,Y;;;KAFvBC,Q","sourcesContent":["import React, {CSSProperties} from 'react';\nimport styles from './game-grid.module.scss';\nimport {GameConfiguration} from \"../../types/types\";\nimport {CELL_SIZE_PX} from \"../../constants\";\nimport {GridCell} from \"../grid-cell/grid-cell\";\nimport {useGridState} from \"../../hooks/use-grid-state\";\n\ntype GameGridProps = {\n    configuration: GameConfiguration;\n}\n\nexport const GameGrid = ({configuration}: GameGridProps) => {\n    const {rows, columns} = configuration;\n    const {gameGrid, setGameGrid} = useGridState(configuration);\n\n    return <div className={styles.gameGrid} style={getGridStyle(rows, columns)}>\n        {gameGrid.map((gridRow, i) => gridRow.map((cell, j) => <GridCell cell={cell} key={`(${i},${j})`}/>))}\n        {/*{Array(rows).fill(null).map((e) => Array(columns).fill(null)*/}\n        {/*    .map((k, i) => <GridCell cell={} key={i}/>))}*/}\n    </div>\n};"]},"metadata":{},"sourceType":"module"}